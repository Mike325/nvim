# Override lua-snippets file
priority 10

snippet if "if ... then ... end"
if $1 then
	${0:${VISUAL:-- Code}}
end
endsnippet

snippet ife "if ... then ... end"
if ${1:cond} then
	${2:${VISUAL:-- Code}}
else
	${0:-- Code}
end
endsnippet

snippet /el((se)?if)?/ "elseif ... then" r
elseif ${1:cond} then
endsnippet

snippet /(l)?fun/ "local function name() ... end" r
`!p snip.rv = 'local ' if match.group(1) is not None else ''`function ${1:name}(${2:args})
	${0:${VISUAL:-- Code}}
end
endsnippet

snippet l "local ..."
local ${1:name} = ${2:x}
endsnippet

snippet pvi "print(vim.inspect(...))"
print(vim.inspect(${0:${VISUAL:1}}))
endsnippet

snippet use "use {...}"
use { '${1:plugin}' }
endsnippet

snippet for "for k,v in pairs(tbl) do ... end"
for ${1:k}, ${2:v} in pairs(${3:tbl}) do
	${0:${VISUAL:-- Code}}
end
endsnippet

snippet fori "for k,v in pairs(tbl) do ... end"
for ${1:i}=1,${2:#var} do
	${0:${VISUAL:-- Code}}
end
endsnippet

snippet as "assert()"
assert(${1:cond}, debug.traceback(${2:'msg'}))
endsnippet

snippet err "error()"
error(debug.traceback(${1:'msg'}))
endsnippet

snippet req "require(module)"
require'${1:mod}'
endsnippet

snippet val "vim.validate()"
vim.validate { ${1:arg} = { $1, '${2:table}' $3}$0 }
endsnippet
